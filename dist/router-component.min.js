function __awaiter(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):new P(function(resolve){resolve(result.value)}).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})}function extractPathParams(pattern,path){const regex=new RegExp(pattern);const matches=regex.exec(path);if(!matches){return[]}else{const groups=[...matches];groups.shift();return groups}}const routeComponents=new Set;class RouterComponent extends HTMLElement{constructor(){super();this.routeElements=new Set;this.fragment=document.createDocumentFragment();routeComponents.add(this);const children=this.children;while(children.length>0){const[element]=children;this.routeElements.add(element);this.fragment.appendChild(element)}}changedUrl(e){const{pathname:pathname}=this.location;if(this.shownPage&&this.shownPage.getAttribute("path")===pathname)return;this.show(pathname)}connectedCallback(){this.changedUrlListener=this.changedUrl.bind(this);window.addEventListener("popstate",this.changedUrlListener);this.historyChangeStates=[window.history.pushState,window.history.replaceState];this.historyChangeStates.forEach(method=>{window.history[method.name]=((...args)=>{const[state]=args;method.apply(history,args);this.changedUrl(state)})});let path=this.location.pathname;if(this.extension&&this.directory!=="/"){path=`/${this.filename}`}this.show(path)}get filename(){return this.location.pathname.replace(this.directory,"")}get directory(){const{pathname:pathname}=this.location;return pathname.substring(0,pathname.lastIndexOf("/"))+"/"}get extension(){const{pathname:pathname}=this.location;const frags=pathname.split(".");if(frags.length<=1){return""}return frags[frags.length-1]}matchPathWithRegex(pathname="",regex){if(!pathname.startsWith("/")){pathname=`${this.directory}${pathname.replace(/^\//,"")}`}return pathname.match(regex)}getRouteElementByPath(pathname){let element;if(!pathname)return;for(const child of this.routeElements){let path=pathname;const search=child.getAttribute("search-params");if(search){path=`${pathname}?${search}`}if(this.matchPathWithRegex(path,child.getAttribute("path"))){element=child;break}}return element}show(pathname){if(!pathname)return;let router;const element=this.getRouteElementByPath(pathname);if(this.shownPage===element){return}if(!element){router=this.getExternalRouterByPath(pathname);if(router){return router.show(pathname)}}if(!element){throw new Error(`Navigated to path "${pathname}" but there is no matching element with a path `+`that matches. Maybe you should implement a catch-all route with the path attribute of ".*"?`)}if(this.shownPage){this.fragment.appendChild(this.shownPage);this.teardownElement(this.shownPage)}this.shownPage=element;this.appendChild(element);this.setupElement(element);this.dispatchEvent(new CustomEvent("route-changed"))}get location(){return window.location}set location(value){}disconnectedCallback(){window.removeEventListener("popstate",this.changedUrlListener);this.historyChangeStates.forEach(method=>{window.history[method.name]=method});if(this.shownPage){this.teardownElement(this.shownPage)}this.routeElements.clear()}clickedLink(e){const link=e.target;if(link.origin===this.location.origin){e.preventDefault();const popStateEvent=new PopStateEvent("popstate",{});window.history.pushState({},document.title,`${link.pathname}${link.search}`);this.changedUrl(popStateEvent)}}bindLinks(element){const links=element.querySelectorAll("a");const shadowLinks=element.shadowRoot?element.shadowRoot.querySelectorAll("a"):[];this.clickedLinkListener=this.clickedLink.bind(this);[...links,...shadowLinks].forEach(link=>{link.addEventListener("click",this.clickedLinkListener)})}unbindLinks(element){const links=element.querySelectorAll("a");const shadowLinks=element.shadowRoot?element.shadowRoot.querySelectorAll("a"):[];this.clickedLinkListener=this.clickedLink.bind(this);[...links,...shadowLinks].forEach(link=>{link.removeEventListener("click",this.clickedLinkListener)})}setupElement(element){const timer=setTimeout(()=>__awaiter(this,void 0,void 0,function*(){this.bindLinks(element);clearTimeout(timer)}),200);this.originalDocumentTitle=document.title;const title=element.getAttribute("document-title");if(title){document.title=title}else{document.title=this.originalDocumentTitle}}teardownElement(element){this.unbindLinks(element)}getExternalRouterByPath(pathname){for(const component of routeComponents){const routeElement=component.getRouteElementByPath(pathname);if(routeElement){return component}}}}customElements.define("router-component",RouterComponent);export{extractPathParams,RouterComponent};